# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    outputs:
      docker_tag: ${{ steps.set-tag.outputs.docker_tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Set Docker tag
      id: set-tag
      run: |
        BRANCH=$(echo "${GITHUB_REF##*/}" | tr '/' '-')
        COMMIT=${GITHUB_SHA::7}
        echo "DOCKER_TAG=${BRANCH}-${COMMIT}" >> $GITHUB_ENV
        echo "docker_tag=${BRANCH}-${COMMIT}" >> $GITHUB_OUTPUT
        

    - name: Build and Push Docker Image
      uses: mr-smithers-excellent/docker-build-push@v4
      with: 
        image: bigmitcht/api-interceptor
        registry: docker.io
        username: ${{secrets.DOCKER_USERNAME}}
        password: ${{secrets.DOCKER_PASSWORD}}
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.set-tag.outputs.docker_tag }}


      # the second jo that builds after the build job is completed
  deploy:
    runs-on: ubuntu-latest
    needs: build
    # adds the ssh key to github to enable the agent to ssh into EC2, the key is als o stored in github secrets
    steps:
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # ssh into EC2 and deploy docker container
      # this section sets an image tag, ssh ec2 instance using ec2 public IP stored in github secrets
      # checks if a container with name user-accounts exists and is running, if yes it stops and removes it
      # pulls a docker image from docker hub and then runs the container on port 8085
      # port 8085 is the port allowed on the security group on aws were we also then run the same port within the container
      - name: SSH into EC2 and run commands
        run: |
          TAG=${{ needs.build.outputs.docker_tag }}
          IMAGE=bigmitcht/api-interceptor:$TAG

          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP }} "
           export DOCKER_IMAGE=bigmitcht/api-interceptor:${{ steps.set-tag.outputs.docker_tag }};
            echo \"Pulling Docker image: \$DOCKER_IMAGE\";

           if docker ps -a --format '{{.Names}}' | grep -Eq '^api-interceptor$'; then
              echo \"Stopping and removing existing container...\"
              docker rm -f api-interceptor
            else
            echo \"No existing container found. Proceeding with new deployment.\"
            fi

            docker pull $IMAGE;
            docker run -d --restart unless-stopped -p 8086:8086 --name api-interceptor $IMAGE
            "






        
